#CodigoemPython
#Taiane_Lorena_Araujo_da_Silva
#SistemasDeInformacao_UFPA

import cv2
import numpy as np
from tkinter import *
from tkinter import filedialog
from tkinter import ttk
from PIL import Image, ImageTk

# Função para abrir e carregar a imagem
def open_image():
    global original_img, img, img_display
    file_path = filedialog.askopenfilename()
    if file_path:
        original_img = cv2.imread(file_path)
        img = original_img.copy()
        display_image(img)

# Função para exibir a imagem na interface
def display_image(img):
    img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
    img_pil = Image.fromarray(img_rgb)
    img_display = ImageTk.PhotoImage(img_pil)
    img_label.config(image=img_display)
    img_label.image = img_display

# Função para resetar para a imagem original
def reset_image():
    global img
    img = original_img.copy()
    display_image(img)

# Função para aplicar o filtro selecionado
def apply_filter():
    global img
    if img is None:
        return
    
    # Processamento de filtros de cor
    color_filter = color_filter_var.get()
    if color_filter == "RGB -> Tons de Cinza":
        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    elif color_filter == "Tons de Cinza -> Binária":
        _, img = cv2.threshold(img, 127, 255, cv2.THRESH_BINARY)
    elif color_filter == "Binária -> Tons de Cinza":
        img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)
    elif color_filter == "Tons de Cinza -> RGB":
        img = cv2.cvtColor(img, cv2.COLOR_GRAY2BGR)

    # Processamento de remoção de ruído
    noise_filter = noise_filter_var.get()
    if noise_filter == "Remoção de Ruído (Média)":
        img = cv2.blur(img, (5, 5))
    elif noise_filter == "Remoção de Ruído (Mediana)":
        img = cv2.medianBlur(img, 5)
    elif noise_filter == "Remoção de Ruído (Gaussiano)":
        img = cv2.GaussianBlur(img, (5, 5), 0)

    # Processamento de destaque de bordas
    edge_filter = edge_filter_var.get()
    if edge_filter == "Destaque de Bordas (Sobel)":
        img = sobel_edge_detection(img)
    elif edge_filter == "Destaque de Bordas (Prewitt)":
        img = prewitt_edge_detection(img)
    elif edge_filter == "Destaque de Bordas (Canny)":
        img = cv2.Canny(img, 100, 200)

    display_image(img)

# Função para destaque de bordas usando Sobel
def sobel_edge_detection(img):
    if len(img.shape) == 3:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    grad_x = cv2.Sobel(img, cv2.CV_64F, 1, 0, ksize=3)
    grad_y = cv2.Sobel(img, cv2.CV_64F, 0, 1, ksize=3)
    sobel = cv2.magnitude(grad_x, grad_y)
    return cv2.convertScaleAbs(sobel)

# Função para destaque de bordas usando Prewitt
def prewitt_edge_detection(img):
    if len(img.shape) == 3:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    kernelx = np.array([[1, 0, -1], [1, 0, -1], [1, 0, -1]])
    kernely = np.array([[1, 1, 1], [0, 0, 0], [-1, -1, -1]])
    img_x = cv2.filter2D(img, -1, kernelx)
    img_y = cv2.filter2D(img, -1, kernely)
    prewitt = cv2.magnitude(img_x.astype(float), img_y.astype(float))
    return cv2.convertScaleAbs(prewitt)

# Configuração da interface gráfica
root = Tk()
root.title("Processamento de Imagem")
root.geometry("900x600")

# Variável global da imagem carregada
original_img = None
img = None

# Frame esquerdo para exibir a imagem
image_frame = Frame(root)
image_frame.pack(side=LEFT, fill=BOTH, expand=True)

# Label para exibir a imagem
img_label = Label(image_frame)
img_label.pack(fill=BOTH, expand=True)

# Frame direito para os controles
control_frame = Frame(root, width=300)
control_frame.pack(side=RIGHT, fill=Y)

# Botão para carregar imagem
btn_open = Button(control_frame, text="Carregar Imagem", command=open_image)
btn_open.pack(pady=10)

# Botão para resetar a imagem
btn_reset = Button(control_frame, text="Imagem Original", command=reset_image)
btn_reset.pack(pady=10)

# Caixa de seleção para filtros de cor
color_filter_var = StringVar()
color_filter_combobox = ttk.Combobox(
    control_frame, textvariable=color_filter_var, state="readonly",
    values=["RGB -> Tons de Cinza", "Tons de Cinza -> Binária", "Binária -> Tons de Cinza", "Tons de Cinza -> RGB"]
)
color_filter_combobox.set("Filtros de Cor")
color_filter_combobox.pack(pady=10)

# Caixa de seleção para remoção de ruído
noise_filter_var = StringVar()
noise_filter_combobox = ttk.Combobox(
    control_frame, textvariable=noise_filter_var, state="readonly",
    values=["Remoção de Ruído (Média)", "Remoção de Ruído (Mediana)", "Remoção de Ruído (Gaussiano)"]
)
noise_filter_combobox.set("Filtros de Ruído")
noise_filter_combobox.pack(pady=10)

# Caixa de seleção para filtros de bordas
edge_filter_var = StringVar()
edge_filter_combobox = ttk.Combobox(
    control_frame, textvariable=edge_filter_var, state="readonly",
    values=["Destaque de Bordas (Sobel)", "Destaque de Bordas (Prewitt)", "Destaque de Bordas (Canny)"]
)
edge_filter_combobox.set("Filtros de Bordas")
edge_filter_combobox.pack(pady=10)

# Botão para aplicar filtro
btn_apply = Button(control_frame, text="Aplicar Filtro", command=apply_filter)
btn_apply.pack(pady=10)

# Iniciar o loop da interface
root.mainloop()
